1.使用session
	作者：轩辕志远
	链接：https://www.zhihu.com/question/19786827/answer/28752144
	来源：知乎
	著作权归作者所有，转载请联系作者获得授权。

	1. 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。
	2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。
	3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。
	所以，总结一下：
	Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；
	Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。
2.通过引入 express-session 中间件实现对会话的支持app.use(session(options))
	session 中间件会在 req 上添加 session 对象，即 req.session 初始值为 {}，当我们登录后设置 req.session.user = 用户信息，返回浏览器的头信息中会带上 set-cookie 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 req.session.user。
3.express-session&&connect-mongo&&connect-flash
	a.	express-session: 会话（session）支持中间件
	b.	connect-mongo: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 connect-redis
	c.	connect-flash: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用,它的原理很简单：设置初始值 req.session.flash={}，通过 req.flash(name, value) 设置这个对象下的字段和值，通过 req.flash(name) 获取这个对象下的值，同时删除这个字段。
4.req----res请求和响应对象

5.path.join();
	path.join（）方法使用平台特定分隔符作为定界符将所有给定的路径段连接在一起，然后对生成的路径进行规范化。
	app.use(express.static(path.join(__dirname, 'public')));设置静态文件目录
	path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
	// Returns: '/foo/bar/baz/asdf'

6.express 中有两个对象可用于模板的渲染：app.locals 和 res.locals。
	使用上的区别在于：app.locals 上通常挂载常量信息（如博客名、描述、作者信息），res.locals 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，res.locals.user = req.session.user）。

	// 设置模板全局常量
	app.locals.blog = {
	  title: pkg.name,
	  description: pkg.description
	};

	// 添加模板必需的三个变量
	app.use(function (req, res, next) {
	  res.locals.user = req.session.user;
	  res.locals.success = req.flash('success').toString();
	  res.locals.error = req.flash('error').toString();
	  next();
	});

7.ejs : Embedded JavaScript templates
	Control flow with <% %>
	Escaped output with <%= %> (escape function configurable

	Express中app.set(name,value).
	Assigns setting name to value, where name is one of the properties from the app settings table.

8.mongodb
	which mongod	
	mkdir -p /data/db
	df -lh   //view the rest store
	mkdir -p /data/db   //create direction level by level
	mongod --dbpath=/data/db --port=27017   //create an service to run mongoDB
	mongod --dbpath=/data/db --port=27017 --fork --syslog
	mongod --shutdown           
	mongod --dbpath=/data/db --port=27017 --fork --logpath=/var/log/mongd.log     //create an service and log a non-sys log
	mongo    //connect to the mongoDB shell
	show dbs   
	show collections
	use part9   //switch a fork to do some intersting thing 
	db.users.insert({"username":"Sid"});
	db.users.find()
	db.user.insert("username":"Zoe","group":"reporter")
	db.users.update({"username":"kebo"},{$set:{"wife":"angry girl"}});
	db.users.update({"username":"kebo"},{$set:{"wife":"angry girl"}},{multi:true});   //multiplex update
	db.user.drop()
	db.users.remove({"fork":"multi"},true)   //remove the first line which is matching
	db.users.remove({"fork":"multi"})    //remove all the lines that matched



	使用mongoose模块操作MongoDB

	mongoose  将nodejs的对象和mongoDB的集合一一对应

	cnpm install mongoose    


	Model  &&  Schema
	see /home/hello/mongoose/**.js

